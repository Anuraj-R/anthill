var showFailMessageState = true;var showStartMessageState = true;var showWinMessageState = true;function importTerrain(){    $("#terrainDiv").load("http://glowworms.info/anthill/terrain.html" , function(){        makeMap() ;        });}function addTerrain( loc , gfx ){        var pos = $("#"+loc).position();    $("#"+loc+"terrainGFX").offset({left:pos.left - 12,top:pos.top - 12});        $("#"+loc+"terrainGFX").html( document.getElementById(gfx).outerHTML );}function addGraphics( ){    //set up the selection sequence boxes    setupOrderBox();        var xNum = document.getElementById("xxNum").value;    var yNum = document.getElementById("yyNum").value;            var i=0;	var	j=0;	for (j=0;j<=yNum*2;j++)	{		for (i=0;i<=xNum*2;i++)		{            var unit = document.getElementById(j+"x"+i+"station").value;                                    if ( unit != "none" )            {                //alert("unit found ");                                // Fill up with the unit's division                document.getElementById(j+"x"+i+"display").innerHTML = document.getElementById ("unit_"+unit).innerHTML;                                //Empty the unit_ div to avoid duplicate elements with same id                document.getElementById ("unit_"+unit).innerHTML = "";                                //update its location - used as a connecting handle for actions based on coordinates                document.getElementById(unit).getElementsByTagName("input")[3].value = j+"x"+i;                                healthBar(unit);            }	    }    }        //Add the pictures    for (i=0; i<SEQUENCE.length; i++)    {        uname=getUnitName(SEQUENCE[i]);        var position = $("#"+uname).position();        $("#"+uname+"Pic").offset({left:position.left,top:position.top});    }    }function setupOrderBox ( ){        //alert("in setupOrderBox");    var scontent="";    for (i=0; i<SEQUENCE.length ; i++){        scontent += '<img id="orderBox'+getUnitName(SEQUENCE[i])+'" name="orderBoxes" src="" width="42" height="42" style=" background:#BFDF93; color:#CCCCCC; font-size:20px; height: 40px; width: 40px; border: 1px solid grey;" >';    }    document.getElementById("orderList").innerHTML = scontent;    var x=document.getElementsByName("orderBoxes");    for (i=0; i<SEQUENCE.length ; i++){        uname=getUnitName(SEQUENCE[i]);        var img = $("#"+uname+"Pic").css('background-image').slice(4,-1).replace(/\"/g,"");        x[i].src = img;    }    //get by index or we cant use it!    $($("[name='" + "orderBoxes" + "']").get(0)).css({ height: "+=6" , width: "+=6"});    }function checkIfWon(){        team=getUnitTeam(SEQUENCE[0]);    for (i=0;i<SEQUENCE.length;i++){        if ( team != getUnitTeam(SEQUENCE[i])){            team=0;        }    }    if (team == "1"){        showWinMessage();    }    else if (team == "9"){        showFailMessage();    }    return team;}function selectNextUnit(){        unLightAll ();    document.getElementById("selectedBox").innerHTML = "NONE";    MOVES = "-1";            if (GAMEOVER == 1){        return 0;    }    else    {        llog(3,"selectForAction invoked with NEXTINDEX="+NEXTINDEX);                NEWINDEX = (NEXTINDEX + 1) % SEQUENCE.length;        LASTINDEX = (NEWINDEX - 2 + SEQUENCE.length ) % SEQUENCE.length;                llog(3,"NEWINDEX: "+NEWINDEX+" LASTINDEX: "+LASTINDEX);                //to avoid the first unit        if (NEXTINDEX != "-1" )        {            //In the new world order, the first element always disappear!            var firstEl = $("[name='" + "orderBoxes" + "']").get(0);            var secndEl = $("[name='" + "orderBoxes" + "']").get(1);            var lastEl  = $("[name='" + "orderBoxes" + "']").get(SEQUENCE.length - 1);            $(secndEl).css({ height: "+=6" , width: "+=6"});            $(firstEl).css({ height: "-=6" , width: "-=6"});                        $(firstEl).hide(600, function () {                $(firstEl).insertAfter(lastEl);                $(firstEl).show('slow', function() {                    NEXTINDEX = NEWINDEX;                    llog(3,"selectForAction invoked with "+SEQUENCE[NEXTINDEX]);                    setTimeout(function(){                        selectForAction (SEQUENCE[NEXTINDEX]);},600);                });            });        }        else {            NEXTINDEX = NEWINDEX;            llog(3,"selectForAction invoked with "+SEQUENCE[NEXTINDEX]);            setTimeout(function(){selectForAction (SEQUENCE[NEXTINDEX]);},600);        }    }}function distance (boxName1, boxName2){    var box1=boxName1;    var box2=boxName2;        var x = box1.indexOf("x");    var x1 = parseInt(box1.slice(0,x));    var y1 = parseInt(box1.slice(x+1));        x = box2.indexOf("x");    var x2 = parseInt(box2.slice(0,x));    var y2 = parseInt(box2.slice(x+1));            var dist = Math.sqrt((x1-x2)*(x1-x2)+(y1-y2)*(y1-y2));    return dist;}function highLightMoves (boxName , movepoints){        moves = movepoints;    xNum = document.getElementById("xxNum").value;    yNum = document.getElementById("yyNum").value;    for (j=0;j<=yNum*2;j++)	{		for (i=0;i<=xNum*2;i++)		{            testBox=j+"x"+i;            if(document.getElementById(testBox+"movable").value != "-1")            {                dist = parseFloat(distance(boxName, testBox));                if ( dist <= moves )                {                	hexColor = document.getElementById(testBox).bgColor.substr(1, 6);                	diff = parseInt( "23132B" , 16 );                	newCol = parseInt( hexColor , 16 ) - diff;                   	document.getElementById(testBox).bgColor = "#"+newCol.toString(16);                                        //check if the square is empty and mark if 'movable'                    if (document.getElementById(testBox+"station").value == "none"){                                                document.getElementById(testBox+"movable").value = 1;                        if (LOGGING > 4){                            var log = document.getElementById("logsheet").innerHTML;                            log = log+"</br>"+"Setting movable flag 1 on "+testBox;                            document.getElementById("logsheet").innerHTML=log;                        }                    }                    else                    {                        if (dist != "0"){ //some other unit present here.                             //Mark it as 'attackable square'                            document.getElementById(testBox+"movable").value = 3;                            if (LOGGING > 4){                                var log = document.getElementById("logsheet").innerHTML;                                log = log+"</br>"+"Setting movable flag 3 on "+testBox;                                document.getElementById("logsheet").innerHTML=log;                            }                        }                    }        		}            }		}	}    //Highlight Range    for (j=0;j<=yNum*2;j++)    {		for (i=0;i<=xNum*2;i++)		{            testBox=j+"x"+i;                        dist = parseFloat(distance(boxName, testBox));            range = getUnitRange(boxName);            if ( dist <= range )            {            	hexColor = document.getElementById(testBox).bgColor.substr(1, 6);            	diff = parseInt( "000022" , 16 );            	newCol = parseInt( hexColor , 16 ) - diff;               	document.getElementById(testBox).bgColor = "#"+newCol.toString(16);                                if(document.getElementById(testBox+"station").value != "none")                {                    if (dist != "0"){ //some other unit present here.                         //Mark it as 'attackable square'                        document.getElementById(testBox+"movable").value = 3;                        if (LOGGING > 4){                            var log = document.getElementById("logsheet").innerHTML;                            log = log+"</br>"+"Setting movable flag 3 on "+testBox;                            document.getElementById("logsheet").innerHTML=log;                        }                    }                }    		}		}	}}function unLightAll (){    xNum = document.getElementById("xxNum").value;    yNum = document.getElementById("yyNum").value;    var i=0;	var	j=0;	for (j=0;j<=yNum*2;j++)	{		for (i=0;i<=xNum*2;i++)		{            testBox=j+"x"+i;            document.getElementById(testBox).bgColor = "#E2F2E0";            //Clear the flag off all 'movable' squares            if (document.getElementById(testBox+"movable").value != "-1"){                if (LOGGING > 4){                    var log = document.getElementById("logsheet").innerHTML;                    log = log+"</br>"+"Clearing movable flag on "+testBox;                    document.getElementById("logsheet").innerHTML=log;                }                document.getElementById(testBox+"movable").value = 0;            }            		}	}}function unLight (boxName){    slvl = document.getElementById(boxName+"sov").value;    i = parseInt( slvl , 10 );    if ( i < 5 )	{	hexColor = document.getElementById(boxName).bgColor.substr(1, 6);	diff = parseInt( "23132B" , 16 );	newCol = parseInt( hexColor , 16 ) + diff;	document.getElementById(boxName).bgColor = "#"+newCol.toString(16);	}}function selectForAction (unitName){    if (LOGGING > 1){        var log = document.getElementById("logsheet").innerHTML;        log = log+"</br>inside selectForAction with "+unitName;        document.getElementById("logsheet").innerHTML=log;    }            // no other unit is present in selection, select this unit    if (document.getElementById("selectedBox").innerHTML == "NONE" ){                if (LOGGING > 1){            var log = document.getElementById("logsheet").innerHTML;            log = log+"</br>"+uname+" selected for action ";            document.getElementById("logsheet").innerHTML=log;        }                //Update the location in selection box        position = document.getElementById(unitName).getElementsByTagName("input")[3].value;        document.getElementById("selectedBox").innerHTML = position;                if (MOVES == "-1")//First move        {            MOVES = document.getElementById(unitName).getElementsByTagName("input")[4].value;        }        highLightMoves (position , MOVES );        highLight(position);                //alert (unitName+" before AI control decision.");        //If the unit is AI controlled, make it autoMove        if (getUnitTeam(unitName) != "1"){            //wait(500); //crap it makes the browser hang!            //alert("automoving "+unitName);            autoMove(unitName);            //setTimeout(function(){autoMove(unitName)},500); //screws up the sequence            //alert("something wrong?");        }                if (LOGGING > 1){            var log = document.getElementById("logsheet").innerHTML;            log = log+"</br>"+unitName+" exiting selectForAction";            document.getElementById("logsheet").innerHTML=log;        }            }}function autoMove(unitName){    boxName = getLocation(unitName);    enemyNear = findClosestEnemy(boxName);    moveTarget = findClosestTile(enemyNear);            //see if enemy is within range; then no need to move    range = getUnitRange(unitName);    dist = distance(boxName, enemyNear);        if (dist < range){ //enemy within range; attack if moves left        if (MOVES >=1){            //end the moves (for now, until double strikes are introduced)            MOVES="-1";            combat(enemyNear);            selectNextUnit();        }    }    else if ( moveTarget != boxName )    {        if (MOVES >=1){            selectForMove(moveTarget);        }    }    else //Closest enemy not within reach; but we are on closest possible tile.(moveTarget == boxName). End turn    {        MOVES = "-1";        selectNextUnit();    }        //alert("returning from autoMove");    return 0;}function selectForMove (boxName){ //The function does selectForAction() again if there are MOVES left after moving        if (LOGGING > 1){        var log = document.getElementById("logsheet").innerHTML;        log = log+"</br>Executing selectForMove on"+boxName;        document.getElementById("logsheet").innerHTML=log;    }        //Find if square is movable    movable = parseInt (document.getElementById(boxName+"movable").value , 10);        if (LOGGING > 3){        var log = document.getElementById("logsheet").innerHTML;        log = log+"</br>Square movable status: "+movable;        document.getElementById("logsheet").innerHTML=log;    }        //Get the unit name from the selection    prevSq = document.getElementById("selectedBox").innerHTML;    uname = document.getElementById(prevSq).getElementsByTagName("div")[0].id;        dist = parseFloat(distance (prevSq , boxName));    range = parseFloat(getUnitRange(prevSq));        // dist == 0 if the player is ending the turn    //alert ("dist :"+dist);    if ( dist == 0 ){        selectNextUnit();    }    else    {        if ( movable == "1" ) // square can be moved into        {            // Fill up the square            if (LOGGING > 0){                var log = document.getElementById("logsheet").innerHTML;                log = log+"</br></br>Moving "+uname+" from "+prevSq+" to "+boxName;                document.getElementById("logsheet").innerHTML=log;            }                        moveInnerHTML ( prevSq+"display" , boxName+"display" );            document.getElementById(prevSq+"display").innerHTML = "";            document.getElementById(boxName+"station").value = uname;            document.getElementById(prevSq+"station").value = "none";            document.getElementById("selectedBox").innerHTML = "NONE";            //update the unit's location            document.getElementById(uname).getElementsByTagName("input")[3].value = boxName;                                                var pos = $("#"+uname).offset();            $("#"+uname+"Pic").animate({left:(pos.left), top:(pos.top) });                        if (LOGGING > 4){                var log = document.getElementById("logsheet").innerHTML;                log = log+"</br>Position of "+uname+" is "+pos.left+", "+pos.top;                document.getElementById("logsheet").innerHTML=log;            }            //apply the bonuses            //document.getElementById("3x5"+"bonus").value                        if (getUnitTeam(uname) == "1"){                if (document.getElementById(getLocation(uname)+"bonus").value == "5" ){                    //Heal Fully!                    setUnitHealth(uname , getUnitMaxHealth(uname) );                    healthBar(uname);                    document.getElementById(boxName+"display").style.backgroundImage = "url(\"\")";                    document.getElementById(getLocation(uname)+"bonus").value = 0;                    $("#"+uname+"Pic").animate({opacity:'0.4'}, 200);                    $("#"+uname+"Pic").animate({opacity:'1.0'}, 200);                }            }                                                //Update MOVES of the selected unit            // dist always <= MOVES , since the square is marked 'movable'            MOVES -= dist;                        //deselect all movable tiles            unLightAll ( );                        //Select the unit again if it has MOVES left.            //alert(MOVES+" moves left and ..");            if ( MOVES >= 1 ){                //select the unit for action                //alert ("selecting "+uname+"again");                selectForAction(uname);            }// No moves left; reset MOVES            else{                MOVES="-1";                //alert("selecting next");                selectNextUnit();            }        }        else if ( movable == "3" )        {                        if (LOGGING > 3){                var log = document.getElementById("logsheet").innerHTML;                log = log+"</br>Currently "+uname+" is about to attack "+boxName;                document.getElementById("logsheet").innerHTML=log;            }            //Attackable square.            if (dist <= range)            {                combat(boxName);                                //end the moves (for now, until double strikes are introduced)                //alert ("ending moves for "+uname);                selectNextUnit();            }            else            {                alert ("move closer to start combat");            }        }        else if ( movable == "-1" )        {            alert ("This square cannot be moved into.");        }        else // square is empty        {            alert ("Click on a highlighted square to move there.");        }    }}function findClosestEnemy(boxName){        team1=getUnitTeam(boxName);    position=getLocation(boxName);        closestDist=100;    closestEn="0x0";        xNum = document.getElementById("xxNum").value;    yNum = document.getElementById("yyNum").value;    for (j=0;j<=yNum*2;j++)    {		for (i=0;i<=xNum*2;i++)		{            testBox=j+"x"+i;                        //unit present            if (document.getElementById(testBox+"station").value != "none"){                //of a different team                if ( getUnitTeam(testBox) != team1 ){                    //and closer than the last unit                    if (distance(testBox,position) < closestDist){                        closestDist = distance(testBox,position);                        closestEn = getLocation(testBox);                    }                }            }		}	}    return closestEn;}function findClosestTile(boxName){        position=document.getElementById("selectedBox").innerHTML;    closestTile=position;    dist = parseFloat(distance(position, boxName));        xNum = document.getElementById("xxNum").value;    yNum = document.getElementById("yyNum").value;    for (j=0;j<=yNum*2;j++)    {    	for (i=0;i<=xNum*2;i++)		{            testBox=j+"x"+i;            //if movable            if ( document.getElementById(testBox+"movable").value == 1 ){                newDist=parseFloat(distance(testBox, boxName));                if (newDist<dist){                    closestTile=testBox;                    dist=newDist;                                        //need to check the minimum moves                }            }		}	}    return closestTile;}function combat(boxName){    //Get the unit name from the selection    prevSq = document.getElementById("selectedBox").innerHTML;    uname = getUnitName(prevSq);        dist = parseFloat(distance (prevSq , boxName));    range = parseFloat(getUnitRange(uname));        team1=getUnitTeam(uname);    team2=getUnitTeam(boxName);    if (team1 != team2){        combatAttack(boxName);    }}function combatAttack(boxName){        //Get the unit name from the selection    prevSq = document.getElementById("selectedBox").innerHTML;    uname = getUnitName(prevSq);        dist = parseFloat(distance (prevSq , boxName));    range = parseFloat(getUnitRange(uname));        if (range < 2){ //melee unit, melee attack        //alert ("melee attack");        meleeAttackAnimation(prevSq , boxName);                attack = parseFloat(getUnitAttack(uname));        health = parseFloat(getUnitHealth(uname));        maxHealth = parseFloat(getUnitMaxHealth(uname));                defense = parseFloat(getUnitDefense(boxName));        impact = parseFloat(attack* ((health+maxHealth)/(maxHealth+maxHealth)) * ((100-defense)/100));        defHealth = parseFloat(getUnitHealth(boxName));                if (impact < defHealth){            defHealth -= impact;            setUnitHealth(boxName, defHealth);            healthBar(getUnitName(boxName));        }        else        {            defHealth = 0;            //code for destroying the unit            setUnitHealth(boxName, defHealth);            healthBar(getUnitName(boxName));                        combatKill(boxName);                        //check if won            winner=checkIfWon();            if ( winner != 0){                GAMEOVER=1;                if (LOGGING > 0){                    var log = document.getElementById("logsheet").innerHTML;                    log = log+"</br>"+"Team "+winner+" has won";                    document.getElementById("logsheet").innerHTML=log;                }            }        }    }    else{//ranged attack            rangedAttackAnimation(prevSq , boxName);                attack = parseFloat(getUnitAttack(uname));        health = parseFloat(getUnitHealth(uname));        maxHealth = parseFloat(getUnitMaxHealth(uname));                defense = parseFloat(getUnitRangedDefense(boxName));        impact = parseFloat(attack* ((health+maxHealth)/(maxHealth+maxHealth)) * ((100-defense)/100));        defHealth = parseFloat(getUnitHealth(boxName));                if (impact < defHealth){            defHealth -= impact;            setUnitHealth(boxName, defHealth);            healthBar(getUnitName(boxName));        }        else        {            defHealth = 0;            //code for destroying the unit            setUnitHealth(boxName, defHealth);            healthBar(getUnitName(boxName));                        combatKill(boxName);                        //check if won            winner=checkIfWon();            if ( winner != 0){                GAMEOVER=1;                if (LOGGING > 0){                    var log = document.getElementById("logsheet").innerHTML;                    log = log+"</br>"+"Team "+winner+" has won";                    document.getElementById("logsheet").innerHTML=log;                }            }        }    }}function combatKill(boxName){    //get the unit name    uname = getUnitName(boxName);    //alert (uname+" are destroyed.");        if (LOGGING > 0){        var log = document.getElementById("logsheet").innerHTML;        log = log+"</br>"+uname+" destroyed</br>";        document.getElementById("logsheet").innerHTML=log;    }        $("#"+uname+"Pic").fadeOut(600);    document.getElementById(boxName+"station").value = "none";        //remove the unit from SEQUENCE    index = SEQUENCE.indexOf(uname);    SEQUENCE.splice(index,1);        //remove the unit from the orderBox        //id orderBox+uname    $("#orderBox"+uname).remove();        //If the dead unit's index is less than NEXTINDEX, reduce NEXTINDEX by 1    //so that the very next unit in turn is not skipped    if (index < NEXTINDEX){        NEXTINDEX -= 1;    }}function generateMatrix( ){	xNum = document.getElementById("xxNum").value;	yNum = document.getElementById("yyNum").value;	var matrixContent="";    var sideContent="";	for (var j=0;j<=yNum*2;j++)	{		matrixContent=matrixContent+'<tr >';         sideContent=sideContent+'<tr >'; 		for (var i=0;i<=xNum*2;i++)		{			matrixContent=matrixContent+'<td><table class="cellTable"  id="'+j+"x"+i+'" bgColor="#E2F2E0" onClick="selectForMove(\''+j+"x"+i+'\')" ><tr>'; //E2F2E0 cce8c7			matrixContent=matrixContent+'<td id="'+j+"x"+i+"display"+'" style={text-align:center; vertical-align:text-top;}"  ></td></tr></table></td>';			sideContent=sideContent+'<input type="hidden" id="'+j+"x"+i+"movable"+'" value="0"></input> ';            sideContent=sideContent+'<input type="hidden" id="'+j+"x"+i+"terrain"+'" value="0"></input> ';                        //sideContent=sideContent+'<div type="hidden" id="'+j+"x"+i+"terrainGFX"+'" >'+j+"x"+i+'terrainGFX'+'</div> ';            sideContent=sideContent+'<div type="hidden" id="'+j+"x"+i+"terrainGFX"+'" ></div> ';                        sideContent=sideContent+'<input type="hidden" id="'+j+"x"+i+"bonus"+'" value="0"></input> ';            sideContent=sideContent+'<input type="hidden" id="'+j+"x"+i+"station"+'" value='+"\"none\""+'></input> ';            //<input type="hidden"		}		matrixContent=matrixContent+'</tr>';        sideContent=sideContent+'</tr>';	}    document.getElementById('Matrix').innerHTML=matrixContent;    document.getElementById('sideMatrix').innerHTML=sideContent;}function healthBar(unitName){        var barLength=48;    var health=getUnitHealth(unitName);    //console.log("Building health bar for "+unitName+" with "+health+" health.");        if (health < 1){        document.getElementById(unitName).getElementsByTagName("span")[0].innerHTML = "";        return 0;    }        var col="#00ff00";    var team = document.getElementById(unitName).getElementsByTagName("input")[6].value; //Team    if (team == 1){        col="#0000ff";    }else if (team == 2){        col="#ff0000";    }else if (team == 3){        col="#aaaaff";    }else if (team == 4){        col="#aaaaff";    }else if (team == 9){        col="#bebebe";    }        var maxHealth=getUnitMaxHealth(unitName);    var greyLength = ((maxHealth-health)/maxHealth)*barLength;    var greenLength = barLength - greyLength;        var outerDiv = document.createElement('div');    var div = document.createElement('div');    div.style.width = greenLength+"px";	div.style.height = "2px";	div.style.background = col;	div.style.display = "inline-block";	outerDiv.appendChild(div);		div = document.createElement('div');    div.style.width = greyLength+"px";	div.style.height = "2px";	div.style.background = "#cccccc";	div.style.display = "inline-block";	outerDiv.appendChild(div);        document.getElementById(unitName).getElementsByTagName("span")[0].innerHTML = "";    document.getElementById(unitName).getElementsByTagName("span")[0].appendChild(outerDiv);    }function moveInnerHTML( from , to ){    document.getElementById(to).innerHTML = document.getElementById(from).innerHTML;    for ( i=0; i<ELEMENTS ; i++){        document.getElementById(to).getElementsByTagName("input")[i].value = document.getElementById(from).getElementsByTagName("input")[i].value;    }}function getUnitEffects(boxName){    return document.getElementById(boxName).getElementsByTagName("input")[12].value;}function getUnitName(boxName){    return document.getElementById(boxName).getElementsByTagName("input")[0].value;}function getUnitAttack(boxName){    var val = document.getElementById(boxName).getElementsByTagName("input")[1].value;    var effects = getUnitEffects(boxName);        val = applyEffectsOnAttack(val, effects);    return val;}function getUnitDefense(boxName){	var def = parseInt(document.getElementById(boxName).getElementsByTagName("input")[2].value);    //return document.getElementById(boxName).getElementsByTagName("input")[2].value;        var effects = getUnitEffects(boxName);    def = applyEffectsOnDefence(def, effects);        //check terrain and unittype    var tdName = getLocation(boxName) + "display";    if ( $(  "#"+tdName  ).hasClass( "forest" ) ){    	console.log ("terrain forest detected. adding melee vulnerability of -30.");    	def -= 30;    }            return def;}function getLocation(boxName){    return document.getElementById(boxName).getElementsByTagName("input")[3].value;}function getUnitInitiative(boxName){    return document.getElementById(boxName).getElementsByTagName("input")[8].value;}function getUnitHealth(boxName){    var health = document.getElementById(boxName).getElementsByTagName("input")[5].value;    return health;}function setUnitHealth(boxName , value ){    document.getElementById(boxName).getElementsByTagName("input")[5].value = value;    return 0;}function getUnitTeam(boxName){    return document.getElementById(boxName).getElementsByTagName("input")[6].value;}function getUnitType(boxName){    return document.getElementById(boxName).getElementsByTagName("input")[7].value;}function getUnitRange(boxName){	//tlog("inside getUnitRange with "+boxName);	var range = parseFloat(document.getElementById(boxName).getElementsByTagName("input")[9].value);        //change range only for ranged unit    if ( getUnitType(boxName) == "ranged" ){	    var tdName = getLocation(boxName) + "display";	    	    if ( $(  "#"+tdName  ).hasClass( "hill" ) ){	    	if ( getUnitType(boxName) == "ranged" ){	    		range = range + 1;	    	}	    }	    else{	    	if ( $(  "#"+tdName  ).hasClass( "mountain" ) ){	    		if ( getUnitType(boxName) == "ranged" ){	    			//console.log ("terrain mountain and ranged unit detected. adding range of +2.");	    			range = range + 2;	    		}	    	}	    }    }        return parseFloat(range).toFixed(2);}function getUnitRangedDefense(fqUnitName){	//tlog("inside getUnitRangedDefense with "+fqUnitName);	ranDef = parseInt(document.getElementById(fqUnitName).getElementsByTagName("input")[10].value);		var effects = getUnitEffects(fqUnitName);    ranDef = applyEffectsOnRangedDefence(ranDef, effects);		var tdName = getLocation(fqUnitName) + "display";	//tlog("determining terrain type of "+tdName);        if ( $( "#"+tdName ).hasClass( "forest" ) ){    	console.log ("terrain forest detected.");    	if (ranDef > 20){    		ranDef = 80;    		//console.log ("ranged defense set to "+ranDef);    	}    	else{    		ranDef += 60;    		//console.log ("ranged defense set to "+ranDef);    	}    }    return ranDef;}function getUnitMaxHealth(boxName){    return document.getElementById(boxName).getElementsByTagName("input")[11].value;}/*function generateSequence ( ){        var x=document.getElementsByName("armies");    for (i=0; i<x.length ; i++){        SEQUENCE[ i ] = getUnitName(x[i].id);    }         //bubblesort with initiative    var swapped=1;    while ( swapped == 1 ){        for (i=0; i<(SEQUENCE.length -1) ; i++){            swapped = 0;            if ( getUnitInitiative(SEQUENCE[i]) > getUnitInitiative(SEQUENCE[i+1]) ){                temp = SEQUENCE[i];                SEQUENCE[i] = SEQUENCE[i+1];                SEQUENCE[i+1] = temp;                swapped = 1;            }        }    }    return 0;}*/